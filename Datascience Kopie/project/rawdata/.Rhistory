dat = read.delim('https://tinyurl.com/y4fark9g', stringsAsFactors = FALSE)
rownames(dat) = dat$id
dat = dat[, -which(colnames(dat) %in% c("id","bp.2s", "bp.2d", "time.ppn"))]
dat = dat[,c(8,6,11,9,10,14,15,2,5,1,3,4,12,13)]
rmv.rows = apply(dat,1,function(x){sum(is.na(x))}) # Go through each row and sum up all missing values
dat = dat[- which(rmv.rows > 0),] # Removing any row with 1 or more missing values
rm(rmv.rows)
dat$location = factor(dat$location) #making data nominal
dat$gender = factor(dat$gender) #making data nominal
dat$frame = factor(dat$frame, levels=c("small", "medium", "large")) #making data ordinal
save(dat, file = dat.RData)
mean(dat$stab.glu)
median(dat$stab.glu)
view(dat)
View(dat)
mean(dat$height)
median(dat$height)
diff(mean(dat$height), median(dat$height))
mean(dat$weight)
median(dat$weight)
diff(mean(dat$weight), median(dat$weight))
mean(dat$height)
median(dat$height)
diff_height=(mean(dat$height)-median(dat$height))
mean(dat$weight)
median(dat$weight)
diff(mean(dat$weight), median(dat$weight))
mean(dat$height)
median(dat$height)
diff_height=(mean(dat$height)-median(dat$height))
diff_height
mean(dat$weight)
median(dat$weight)
diff_weight=(mean(dat$weight)-median(dat$weight))
diff_weight
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
dat = read.delim('https://tinyurl.com/y4fark9g', stringsAsFactors = FALSE)
rownames(dat) = dat$id
dat = dat[, -which(colnames(dat) %in% c("id","bp.2s", "bp.2d", "time.ppn"))]
dat = dat[,c(8,6,11,9,10,14,15,2,5,1,3,4,12,13)]
rmv.rows = apply(dat,1,function(x){sum(is.na(x))}) # Go through each row and sum up all missing values
dat = dat[- which(rmv.rows > 0),] # Removing any row with 1 or more missing values
rm(rmv.rows)
dat$location = factor(dat$location) #making data nominal
dat$gender = factor(dat$gender) #making data nominal
dat$frame = factor(dat$frame, levels=c("small", "medium", "large")) #making data ordinal
save(dat, file = dat.RData)
load(dat.RData)
mean(dat$stab.glu)
median(dat$stab.glu)
quantile(dat$stab.glu)
quantile(dat$stab.glu, probs = seq(0.9))
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
dat = read.delim('https://tinyurl.com/y4fark9g', stringsAsFactors = FALSE)
rownames(dat) = dat$id
dat = dat[, -which(colnames(dat) %in% c("id","bp.2s", "bp.2d", "time.ppn"))]
dat = dat[,c(8,6,11,9,10,14,15,2,5,1,3,4,12,13)]
rmv.rows = apply(dat,1,function(x){sum(is.na(x))}) # Go through each row and sum up all missing values
dat = dat[- which(rmv.rows > 0),] # Removing any row with 1 or more missing values
rm(rmv.rows)
dat$location = factor(dat$location) #making data nominal
dat$gender = factor(dat$gender) #making data nominal
dat$frame = factor(dat$frame, levels=c("small", "medium", "large")) #making data ordinal
mean(dat$stab.glu)
median(dat$stab.glu)
mean(dat$height)
median(dat$height)
diff_height=(mean(dat$height)-median(dat$height))
diff_height
mean(dat$weight)
median(dat$weight)
diff_weight=(mean(dat$weight)-median(dat$weight))
diff_weight
#In symmetrischen Verteilungen überlappen sich Median und Mittelwert. Wenn es jedoch einen Unterschied zwischen den beiden Werten gibt, handelt es sich um eine asymmetrische Verteilung. Wenn die Verteilung einen Schweif nach rechts hat, ist der Mittelwert größer als der Median. Wenn die Verteilung einen Schweif nach links hat, ist der Median größer als der Mittelwert. Der Median ist generell robuster gegenüber Ausreißern.
quantile(dat$stab.glu, probs = seq(0.9))
quantile(dat$stab.glu, probs = seq(0, 1, 0.25, 0.9))
quantile(dat$stab.glu, probs = seq(0, 1, 0.25))
quantile(dat$stab.glu, probs = seq(0,9)
quantile(dat$stab.glu, probs = seq(0,9))
quantile(dat$stab.glu, probs = seq(0.9))
quantile(dat$stab.glu, probs = c(0.9))
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
data.frame(diff_glyhb, diff_chol, diff_stab.glu)
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
data.frame(diff_glyhb, diff_chol, diff_stab.glu, row.names = "median-mean")
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
vector_diffs = c(diff_glyhb, diff_chol, diff_stab.glu)
data.frame(vector_diffs, row.names = "median-mean")
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
vector_diffs = c(diff_glyhb, diff_chol, diff_stab.glu)
data.frame(vector_diffs)
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
vector_diffs = c(diff_glyhb, diff_chol, diff_stab.glu)
data.frame(diff_glyhb, diff_chol, diff_stab.glu, row.names = "median-mean")
vector_diffs
vector_diffs<0
diff.glyh = median(dat$glyhb) - mean(dat$glyhb)
diff.chol = median(dat$chol) - mean(dat$chol)
diff.stab_glu = median(dat$stab.glu) - mean(dat$stab.glu)
##
XX = data.frame(diff = c(diff.glyh,diff.chol,diff.stab_glu),row.names = c('Glyb','Chol','Stab Glu'))
XX$direction = ifelse(XX$diff >0, 'Positive','Negative' )
XX
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
vector_diffs = c(diff_glyhb, diff_chol, diff_stab.glu)
vector_diffs<0
data.frame(vector_diffs, row.names = "median-mean")
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
vector_diffs = c(diff_glyhb, diff_chol, diff_stab.glu)
vector_diffs<0
data.frame(vector_diffs)
names=c(glyhb, chol, stab.glu)
names=c(glyhb, chol, stab.glu)
names=c(glyhb, chol, glu)
names=c(glyhb, chol, glu)
names=c("glyhb", "chol", "stab.glu")
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
vector_diffs = c(diff_glyhb, diff_chol, diff_stab.glu)
vector_diffs<0
data.frame(names, vector_diffs)
names=c("glyhb", "chol", "stab.glu")
diff_glyhb = median(dat$glyhb)-mean(dat$glyhb)
diff_chol = median(dat$chol)-mean(dat$chol)
diff_stab.glu = median(dat$stab.glu)-mean(dat$stab.glu)
vector_diffs = c(diff_glyhb, diff_chol, diff_stab.glu)
vector_diffs<0
data.frame(names, vector_diffs)
diff.glyh = median(dat$glyhb) - mean(dat$glyhb)
diff.chol = median(dat$chol) - mean(dat$chol)
diff.stab_glu = median(dat$stab.glu) - mean(dat$stab.glu)
XX = data.frame(diff = c(diff.glyh,diff.chol,diff.stab_glu),row.names = c('Glyb','Chol','Stab Glu'))
XX$direction = ifelse(XX$diff >0, 'Positive','Negative' )
XX
plot(dat$stab.glu,dat$glyhb,
pch=20,
xlab='Stabilized glucose',
ylab='Glycosylated hemoglobin'
)
plot(dat$weight,dat$glyhb,
pch=20,
xlab='Weight',
ylab='Glycosylated hemoglobin'
)
plot(dat$glyhb,dat$weight,
pch=20,
xlab='Weight',
ylab='Glycosylated hemoglobin'
)
plot(dat$frame, dat$glyhb,
pch=20,
xlab='Weight',
ylab='Glycosylated hemoglobin'
)
plot(dat$frame, dat$glyhb,
pch=20,
xlab='frame',
ylab='Glycosylated hemoglobin'
)
## compute the Pearson correlation
cor(dat$stab.glu,dat$glyhb,method='pearson')
##
## compute the Spearman correlation
cor(dat$stab.glu,dat$glyhb,method='spearman')
plot(rank(dat$stab.glu),rank(dat$glyhb),
pch=20,
xlab='Ranks Stabilized glucose',
ylab='Ranks Glycosylated hemoglobin'
)
plot(rank(dat$stab.glu),rank(dat$glyhb),
pch=50,
xlab='Ranks Stabilized glucose',
ylab='Ranks Glycosylated hemoglobin'
)
plot(rank(dat$stab.glu),rank(dat$glyhb),
pch=20,
xlab='Ranks Stabilized glucose',
ylab='Ranks Glycosylated hemoglobin'
)
plot(dat$hip, dat$waist, #
pch=20,
xlab = "Hip",
ylab = "Waist"
)
plot(dat$hip, dat$waist, #
pch=20,
xlab = "Hip",
ylab = "Waist"
)
cor(dat$hip, dat$waist, method = Pearson)
plot(dat$hip, dat$waist, #
pch=20,
xlab = "Hip",
ylab = "Waist"
)
cor(dat$hip, dat$waist, method = "Pearson")
plot(dat$hip, dat$waist, #
pch=20,
xlab = "Hip",
ylab = "Waist"
)
cor(dat$hip, dat$waist, method = "pearson")
cor(dat$hip, dat$waist, method = "spearman")
plot(dat$hip, dat$waist, #
pch=20,
xlab = "Hip",
ylab = "Waist"
)
cor(dat$hip, dat$waist, method = "pearson")
cor(dat$hip, dat$waist, method = "spearman")
#Not really different but I still want to plot both for exercise purposes:
plot(rank(dat$hip), rank(dat$waist),
pch=20,
xlab = "Rank of Hip",
ylab = "Rank of waist")
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
dat = read.delim('https://tinyurl.com/y4fark9g', stringsAsFactors = FALSE)
rownames(dat) = dat$id
dat = dat[, -which(colnames(dat) %in% c("id","bp.2s", "bp.2d", "time.ppn"))]
dat = dat[,c(8,6,11,9,10,14,15,2,5,1,3,4,12,13)]
rmv.rows = apply(dat,1,function(x){sum(is.na(x))}) # Go through each row and sum up all missing values
dat = dat[- which(rmv.rows > 0),] # Removing any row with 1 or more missing values
rm(rmv.rows)
dat$location = factor(dat$location) #making data nominal
dat$gender = factor(dat$gender) #making data nominal
dat$frame = factor(dat$frame, levels=c("small", "medium", "large")) #making data ordinal
mean(dat$stab.glu)
median(dat$stab.glu)
quantile(dat$stab.glu)
diff.glyh = median(dat$glyhb) - mean(dat$glyhb)
diff.chol = median(dat$chol) - mean(dat$chol)
diff.stab_glu = median(dat$stab.glu) - mean(dat$stab.glu)
##
XX = data.frame(diff = c(diff.glyh,diff.chol,diff.stab_glu),row.names = c('Glyb','Chol','Stab Glu'))
XX$direction = ifelse(XX$diff >0, 'Positive','Negative' )
XX
q = quantile(dat$glyhb,probs=c(0.1,0.9))
glyhb.trimmed = dat$glyhb[dat$glyhb > q[1] & dat$glyhb < q[2]]
## Without trimming
mean(dat$glyhb);median(dat$glyhb)
mean(glyhb.trimmed);median(glyhb.trimmed)
draw = function(n,col=c('red','blue')) {
m = mean(dat[,n],na.rm=TRUE)
M = median(dat[,n],na.rm=TRUE)
##
hist(dat[,n],breaks=20,main=n);abline(v=c(m,M),lty=3,lwd=2,col=col)
}
draw('chol',col=c('orange','black'))
plot(dat$stab.glu,dat$glyhb,
pch=20,
xlab='Stabilized glucose',
ylab='Glycosylated hemoglobin'
)
## compute the Pearson correlation
cor(dat$stab.glu,dat$glyhb,method='pearson')
##
## compute the Spearman correlation
cor(dat$stab.glu,dat$glyhb,method='spearman')
plot(rank(dat$stab.glu),rank(dat$glyhb),
pch=20,
xlab='Ranks Stabilized glucose',
ylab='Ranks Glycosylated hemoglobin'
)
for (i in 1:length(x)) {print(x[i]^2)}
dat.num = dat[,-(1:3)]
## Solution 1 : for loop
correlation.mat = matrix(nrow = ncol(dat.num),
ncol = ncol(dat.num)
)
rownames(correlation.mat) = colnames(dat.num)
colnames(correlation.mat) = colnames(dat.num)
for (i in 1:ncol(dat.num)) {
for (j in 1:ncol(dat.num)) {
correlation.mat[i,j] = cor(dat.num[,i],dat.num[,j])
#print(correlation.mat)
}
}
pheatmap(correlation.mat)
library(pheatmap)
dat.num = dat[,-(1:3)]
## Solution 1 : for loop
correlation.mat = matrix(nrow = ncol(dat.num),
ncol = ncol(dat.num)
)
rownames(correlation.mat) = colnames(dat.num)
colnames(correlation.mat) = colnames(dat.num)
for (i in 1:ncol(dat.num)) {
for (j in 1:ncol(dat.num)) {
correlation.mat[i,j] = cor(dat.num[,i],dat.num[,j])
#print(correlation.mat)
}
}
pheatmap(correlation.mat)
## Solution 2 :  sapply function
correlation.mat = sapply(1:ncol(dat.num),function(i) {
sapply(1:ncol(dat.num),function(j) {
cor(dat.num[,i],dat.num[,j])
})})
rownames(correlation.mat) = colnames(dat.num)
colnames(correlation.mat) = colnames(dat.num)
## Solution 3 ...
correlation.mat = cor(dat.num)
qqnorms(rpois(seq(0.01, 0.99, 0.005), lambda = 20)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
qqnorms(rpois(seq(0.01, 0.99, 0.005), lambda = 20)
qqnorms(rpois(seq(0.01, 0.99, 0.005), lambda = 20)
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 20)
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 20))
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 5))
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 100))
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 100))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 20))
knitr::opts_chunk$set(echo = TRUE)
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 20))
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 50))
knitr::opts_chunk$set(echo = TRUE)
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 20))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 20))
knitr::opts_chunk$set(echo = TRUE)
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 20))
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 5))
qqnorm(rpois(seq(0.01, 0.99, 0.005), lambda = 100))
X= sapply(1:100, function (i))
X= sapply(1:100, function (i)
X= sapply(1:100, function (i))
X= sapply(1:100, function(i))
X= sapply(1:100, function(i) rnorm)
X= sapply(1:100, function(i) rnorm)
X= sapply(1:100, function(i) rnorm)
dim(X)
X= sapply(1:100, function(i) rnorm(N,m,s))
dim(X)
X= sapply(1:100, function(i) rnorm(N,m,s))
dim(X)
N
N
m
s
dat
View(dat)
mean(dat)
max(dat)
print(1:10)
Dat
colMeans(Dat)
if(!requireNamespace("BiocManager", quitely=TRUE))
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("vsn")
library(pheatmap)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn")
browseVignettes("vsn")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affy")
Yes
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affy")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
setwd(/Users/lydiasteiner/Desktop/Datascience/project)
setwd(Users/lydiasteiner/Desktop/Datascience/project)
setwd(lydiasteiner/Desktop/Datascience/project)
setwd("/Desktop/Datascience/project)
setwd("/Users/lydiasteiner/Desktop/Datascience/project")
help()
?detwd
?setwd
#print(correlation.mat)
>setwd
library(affy)
library(affyio)
library(assertthat)
library(limma)
library(backports)
library(base64enc)
library(Biobase)
library(BiocGenerics)
setwd("/Users/lydiasteiner/Desktop/Datascience/project")
wd
data.
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn")
browseVignettes("vsn")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affy")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
sessionInfo()
#Load libraries
library(affy)
#Read in .CEL files
setwd("/Users/lydiasteiner/Desktop/Datascience/project/rawdata")
#2.   Quality Control
#-------------------------
#2.1  Single Chip control
#-------------------------
image(data.mouse, col=rainbow(100, start=0, end=0.75)[100:1])
#Read in .CEL files
setwd("/Users/lydiasteiner/Desktop/Datascience/project/rawdata/")
#Read in .CEL files
setwd("/Users/lydiasteiner/Desktop/Datascience/project/rawdata/")
data.mouse
boxplot(data.mouse)
boxplot(data.mouse, col=rainbow(20), cex.axis=0.5, main="Gene expression in mouse")
setwd()
dev.copy2eps(file="boxplot_mouse_rawdata.eps")
#normalized data
x11(w=10, h=7)
par(las=2)
mmi=c(1,0.7,1.0477939,0.5366749)
par(mai=mmi)
boxplot(exprs(mouse.vsnrma), col=rainbow(20), cex.axis=0.5, main="Gene expression in mouse, normalized")
setwd()
dev.copy2eps(file="boxplot_mouse_vsnrma_normalized.eps")
#if necessary quantile normalization
#Load libraries
library(affy)
library(vsn)
#Load libraries
library(affy)
library(vsn)
library(vctrs)
library(vsn)
library(BiocVersion)
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
library(vctrs)
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
install.packages(c("cli", "ggplot2", "MASS", "ps", "testthat", "tibble", "vctrs", "xfun", "zoo"))
#Load libraries
library(affy)
library(vctrs)
#Load libraries
library(affy)
library(vctrs)
library(vsn)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
